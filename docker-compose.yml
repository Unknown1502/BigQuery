version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - BIGQUERY_PROJECT_ID=pricing-intelligence-dev
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
    depends_on:
      - redis
      - pubsub-emulator
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    networks:
      - pricing-network

  # Image Processing Service
  image-processor:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.processor
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - REDIS_URL=redis://redis:6379
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
    depends_on:
      - redis
      - pubsub-emulator
    volumes:
      - ./src:/app/src
      - ./data/sample_data/street_images:/app/images
    networks:
      - pricing-network

  # Pricing Engine Service
  pricing-engine:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.pricing
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - BIGQUERY_PROJECT_ID=pricing-intelligence-dev
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - pricing-network

  # Data Ingestion Service
  data-ingestion:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.ingestion
    environment:
      - ENVIRONMENT=development
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - BIGQUERY_PROJECT_ID=pricing-intelligence-dev
    depends_on:
      - pubsub-emulator
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    networks:
      - pricing-network

  # Stream Processor Service
  stream-processor:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.stream
    environment:
      - ENVIRONMENT=development
      - PUBSUB_EMULATOR_HOST=pubsub-emulator:8085
      - BIGQUERY_PROJECT_ID=pricing-intelligence-dev
    depends_on:
      - pubsub-emulator
    volumes:
      - ./src:/app/src
    networks:
      - pricing-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - pricing-network

  # Pub/Sub Emulator for Local Development
  pubsub-emulator:
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    ports:
      - "8085:8085"
    command: >
      sh -c "gcloud beta emulators pubsub start --host-port=0.0.0.0:8085 --project=pricing-intelligence-dev"
    networks:
      - pricing-network

  # BigQuery Emulator (using Cloud SQL Proxy for local development)
  bigquery-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:latest
    command: >
      /cloud_sql_proxy -instances=pricing-intelligence-dev:us-central1:pricing-db=tcp:0.0.0.0:5432
    ports:
      - "5432:5432"
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/config/service-account.json
    volumes:
      - ./config/service-account.json:/config/service-account.json:ro
    networks:
      - pricing-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pricing-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pricing-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - pricing-network

  # MinIO for Local Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - pricing-network

  # Create MinIO Buckets
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/street-imagery-bucket;
      /usr/bin/mc mb myminio/model-artifacts-bucket;
      /usr/bin/mc mb myminio/data-lake-bucket;
      exit 0;
      "
    networks:
      - pricing-network

  # Nginx for Load Balancing (Optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
      - image-processor
      - pricing-engine
    networks:
      - pricing-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
  minio-data:

networks:
  pricing-network:
    driver: bridge
